name: TCC-3426_Continuous_data_transfer_from_client_Appn_to_onPremAppn

#here the data transferred will be noOfConnctn*1Kib.

env:
  timeInterval: 2

tasks:
# Deploy Tibcotunnelroute CR
  - name: TCC-3426_deployCR
    type: foreground
    templates:
     - input: "./resources/tibcotunnelrouteCR.yaml"
       output: "./generated/tibcotunnelrouteCR.yaml"
    exec: 
     timeout: 30s
     script: 
        cmd: "${ENV.fnSh}"
        args: ["deployResourse", "./generated/tibcotunnelrouteCR.yaml"]
        capture:
         stdout:
           - name: output
             match: "((?s).*)"
         stderr:
            - name: outerr
              match: "((?s).*)"
    expect:
     - name: status
       operator: equal
       value: 0
# Status of Tibcotunneroute CR
  - name: TCC-3426_tibcotunnelroute-status
    type: foreground
    exec: 
      timeout: 30s
      script: 
        cmd: "kubectl"
        args: ["get", "tibcotunnelroute", "${META_DATA_NAME}", "-n", "${NAMESPACE_TENANT}", "-o", "json"]
        capture: 
          stdout: 
            - name : status_cr
              matchType: jsonpath
              match: "{.status.resource.state}"
    expect:
      - name: status
        operator: equal
        value: 0
      - name: status_cr
        operator: containsStr
        value: "processed"
# Deploy ClientAppn Deployments
  - name: TCC-3426_deployClientApp
    type: foreground
    templates: 
      - input: "./resources/client-app.yaml"
        output: "./generated/client-app.yaml"
    exec: 
      timeout: 2m
      script:
        cmd: "${ENV.fnSh}"
        args: ["deployResourse", "./generated/client-app.yaml"]
    expect:
      - name: status
        operator: equal
        value: 0
# tibtunnel configuration
  - name: TCC-3426_tibTunnelConfigure
    type: foreground
    exec:
      timeout: 5s
      script:
        cmd: "/bin/bash"
        args: ["-c", "./tibtunnel configure -a ${suite.setup.secretKey_hashKey.accesskey}"]   
        capture:
          stdout:
            - name: output
              match: "((?s).*)"
    expect:
      - name: output
        operator: containsStr
        value: "'default' was successfully saved"
# Status of Client Applications
  - name: TCC-3426_status_of-clientAppn
    type: foreground
    timeout: 1m
    exec:
      script: 
        cmd: "${ENV.fnSh}"
        args: ["getPodNamesUsingSelector", "${NAMESPACE_TENANT}", "app=http"]
        capture:
          stdout:
            - name: running_state
              matchType: jsonpath
              match: "{.items[*].status.phase}"
            - name: capture_pod_name
              matchType: jsonpath
              match: "{.items[0].metadata.name}"
            - name: capture_pod_name1
              matchType: jsonpath
              match: "{.items[1].metadata.name}"
    expect:
      - name: status
        operator: equal
        value: 0
      - name: running_state
        operator: contains
        value: "Running"
      - name: running_state
        operator: notContains
        value: "Pending"
    repeat:
      count: 10
      until: success
      sleep: 20s  
# Tibtunnel Connect
  - name: TCC-3426_tibtunnelConnect
    type: background
    exec:
      script:
        cmd: "/bin/bash"
        args: ["-c", "timeout 60s ./tibtunnel connect -d --remote-debug -s ${CONTAINER_PORT}:${ONPREMISE_HOSTNAME}:${ONPREMISE_PORT} https://${FQDN}/${ENDPOINT} -l ./tibtunnelLog" ]
# Tunnel Status b/w tibtunnel and Client App 
  - name: TCC-3427_checkTunnelStatus
    type: foreground
    timeout: 30s
    exec:
      script:
        cmd: "${ENV.fnSh}"
        args: ["checkTunnelStatus","${TCC-3426_status_of-clientAppn.capture_pod_name}","${NAMESPACE_TENANT}"]
        capture:
          stdout: 
            - name: output
              match: "((?s).*)"          
    expect:
      - name: output
        operator: containsStr
        value: "\"isConnected\":true"
      - name: output
        operator: notContainsStr
        value: "false"
      - name: output
        operator: containsStr
        value: "Tunnel is connected"
    repeat:
      count: 2
      until: success
      sleep: 13s  
# Start On-Prem Appn
  - name: TCC-3426_startOnpremAppn
    type: background
    exec:
      script:
        cmd: "/bin/bash"
        args: ["-c", "timeout 40s ./tcp-server -d -a ${ONPREMISE_HOSTNAME}:${ONPREMISE_PORT} >> ./tcpserverLog"]
        capture:
          stdout:
            - name: output
              match: "((?s).*)"
          stderr:
            - name: stderr
              match: "((?s).*)"
    expect:
      - name: stderr
        operator: containsStr
        value: "TCP server started"
# Communication b/w ClientPod and On-Prem Appn by sending Data
  - name: TCC-3426_sendData1
    type: background
    exec:
      timeout: 30s
      script:
        cmd: "${ENV.fnSh}"
        args: ["continiousDataTransfer", "${TCC-3426_status_of-clientAppn.capture_pod_name}", "${NAMESPACE_TENANT}", "${ONPREMISE_HOSTNAME}:${CONTAINER_PORT}", "${timeInterval}" ]
        #cmd: "kubectl"
        #args: ["exec", "${TCC-3427_status_of-clientAppn.capture_pod_name}", "-n${NAMESPACE_TENANT}", "-c", "main", "--", "timeout 20s", "/test/tcp-client", "-a", "localhost:8081","-k","1s"]
        capture:
          stdout:
            - name: output
              match: "((?s).*)"
          stderr:
            - name: stderr        #isme stederr 1 hi line pick kr rha hai
              match: "((?s).*)"    
    expect:
      - name: stderr
        operator: containsStr
        value: "Successfully send/received 1.0KiB" #no of times sending data so the total size will be only 1Kb
  - name: sleepCommand
    type: foreground
    exec:
      script:
        cmd: "sleep"
        args: ["70"]

teardown: 
# Delete the Tibcotunneroute CR
  - name: TCC-3427_delete_yaml_file
    type: foreground
    exec: 
      timeout: 1m
      script:
        cmd: "${ENV.fnSh}"
        args: ["deleteResourse", "./generated/tibcotunnelrouteCR.yaml"]
    expect:
      - name: status
        operator: equal
        value: 0
# Delete the ClientApp Deployments
  - name: TCC-3427_delete_yaml_file
    type: foreground
    exec: 
      timeout: 1m
      script:
        cmd: "${ENV.fnSh}"
        args: ["deleteResourse", "./generated/client-app.yaml"]
    expect:
      - name: status
        operator: equal
        value: 0
    repeat:
      count: 3
      until: success
      sleep: 10ms
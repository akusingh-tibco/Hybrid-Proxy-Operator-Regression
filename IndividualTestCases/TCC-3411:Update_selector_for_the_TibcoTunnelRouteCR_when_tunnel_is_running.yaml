name: TCC-3411_DataTransfer_MultipleClientApps

tasks: 
#tibcotunnelrouteCRMultipleClient
# Deploy MultipleClientApp_yaml
  - name: TCC-3411_deployCR
    type: foreground
    templates:
     - input: "./resources/tibcotunnelrouteCRMultipleClient.yaml"
       output: "./generated/tibcotunnelrouteCRMultipleClient.yaml"
    exec: 
     timeout: 1m
     script: 
        cmd: "${ENV.fnSh}"
        args: ["deployResourse", "./generated/tibcotunnelrouteCRMultipleClient.yaml"]
        capture:
         stdout:
           - name: output
             match: "((?s).*)"
         stderr:
            - name: outerr
              match: "((?s).*)"
    expect:
     - name: status
       operator: equal
       value: 0

# Deploy MultipleClientApp_yaml
  - name: TCC-3411_deployCR
    type: foreground
    templates:
     - input: "./resources/client-appMultiple.yaml"
       output: "./generated/client-appMultiple.yaml"
    exec: 
     timeout: 1m
     script: 
        cmd: "${ENV.fnSh}"
        args: ["deployResourse", "./generated/client-appMultiple.yaml"]
        capture:
         stdout:
           - name: output
             match: "((?s).*)"
         stderr:
            - name: outerr
              match: "((?s).*)"
    expect:
     - name: status
       operator: equal
       value: 0


# Status of Tibcotunneroute CR
  - name: TCC-3411_tibcotunnelroute-status
    type: foreground
    exec: 
      timeout: 30s
      script: 
        cmd: "kubectl"
        args: ["get", "tibcotunnelroute", "${META_DATA_NAME}", "-n", "${NAMESPACE_TENANT}", "-o", "json"]
        capture: 
          stdout: 
            - name : status_cr
              matchType: jsonpath
              match: "{.status.resource.state}"
    expect:
      - name: status
        operator: equal
        value: 0
      - name: status_cr
        operator: containsStr
        value: "processed"

# tibtunnel configuration
  - name: TCC-3411_tibTunnelConfigure
    type: foreground
    exec:
      timeout: 5s
      script:
        cmd: "/bin/bash"
        args: ["-c", "./tibtunnel configure -a ${suite.setup.secretKey_hashKey.accesskey}"]   
        capture:
          stdout:
            - name: output
              match: "((?s).*)"
    expect:
      - name: output
        operator: containsStr
        value: "'default' was successfully saved"

# Status of Client Applications
  - name: TCC-3411_status_of-clientAppn
    type: foreground
    timeout: 1m
    exec:
      script: 
        cmd: "${ENV.fnSh}"
        args: ["getPodNamesUsingSelector", "${NAMESPACE_TENANT}", "app=http"]
        capture:
          stdout:
            - name: running_state
              matchType: jsonpath
              match: "{.items[*].status.phase}"
            - name: capture_pod_name
              matchType: jsonpath
              match: "{.items[0].metadata.name}"
    expect:
      - name: status
        operator: equal
        value: 0
      - name: running_state
        operator: contains
        value: "Running"
      - name: running_state
        operator: notContains
        value: "Pending"
    repeat:
      count: 10
      until: success
      sleep: 20s  

# Tibtunnel Connect
  - name: TCC-3411_tibtunnelConnect
    type: background
    exec:
      script:
        cmd: "/bin/bash"
        args: ["-c", "timeout 90s ./tibtunnel connect -d --remote-debug -s ${CONTAINER_PORT}:${ONPREMISE_HOSTNAME}:${ONPREMISE_PORT} https://${FQDN}/${ENDPOINT} -l ./tibtunnelLog-3411" ]

  - name: TCC35x_sleepCommandafterTunnelConnectCommand
    type: foreground
    exec:
      script:
        cmd: "sleep"
        args: ["10"]

# # Tunnel Status b/w tibtunnel and Client App 
#   - name: TCC-3411_checkTunnelStatus
#     type: foreground
#     timeout: 20s
#     exec:
#       script:
#         cmd: "${ENV.fnSh}"
#         args: ["checkTunnelStatus","${TCC-3411_status_of-clientAppn.capture_pod_name}","${NAMESPACE_TENANT}"]
#         capture:
#           stdout: 
#             - name: output
#               match: "((?s).*)"          
#     expect:
#       - name: output
#         operator: containsStr
#         value: "\"isConnected\":true"
#       - name: output
#         operator: notContainsStr
#         value: "false"
#       - name: output
#         operator: containsStr
#         value: "Tunnel is connected"
#     repeat:
#       count: 3
#       until: success
#       sleep: 20ms  



# Deploy MultipleClientApp_yaml
  - name: TCC-3411_deployCR
    type: foreground
    templates:
     - input: "./resources/tibcotunnelrouteCRMultipleClientSelectorUpdate.yaml"
       output: "./generated/tibcotunnelrouteCRMultipleClientSelectorUpdate.yaml"
    exec: 
     timeout: 1m
     script: 
        cmd: "${ENV.fnSh}"
        args: ["deployResourse", "./generated/tibcotunnelrouteCRMultipleClientSelectorUpdate.yaml"]
        capture:
         stdout:
           - name: output
             match: "((?s).*)"
         stderr:
            - name: outerr
              match: "((?s).*)"
    expect:
     - name: status
       operator: equal
       value: 0

  - name: TCC35xx_sleepCommand
    type: foreground
    exec:
      script:
        cmd: "sleep"
        args: ["40"]

# Status of Client Applications
  - name: TCC-3411_status_of-clientAppnLatest
    type: foreground
    timeout: 1m
    exec:
      script: 
        cmd: "${ENV.fnSh}"
        args: ["getPodNamesUsingSelector", "${NAMESPACE_TENANT}", "app=http"]
        capture:
          stdout:
            - name: running_state
              matchType: jsonpath
              match: "{.items[*].status.phase}"
            - name: capture_pod_name
              matchType: jsonpath
              match: "{.items[0].metadata.name}"
    expect:
      - name: status
        operator: equal
        value: 0
      - name: running_state
        operator: contains
        value: "Running"
      - name: running_state
        operator: notContains
        value: "Pending"
    repeat:
      count: 10
      until: success
      sleep: 20s  

# Tunnel Status b/w tibtunnel and Client App 
  - name: TCC-3411_checkTunnelStatusLatest
    type: foreground
    timeout: 20s
    exec:
      script:
        cmd: "${ENV.fnSh}"
        args: ["checkTunnelStatus","${TCC-3411_status_of-clientAppnLatest.capture_pod_name}","${NAMESPACE_TENANT}"]
        capture:
          stdout: 
            - name: output
              match: "((?s).*)"          
    expect:
      - name: output
        operator: containsStr
        value: "\"isConnected\":false"
      - name: output
        operator: notContainsStr
        value: "true"
      - name: output
        operator: containsStr
        value: "No tunnel is connected"
    repeat:
      count: 3
      until: success
      sleep: 20ms  



###validate Tibtunnel logs as well
################################################################
################################################################


  - name: sleepCommand
    type: foreground
    exec:
      script:
        cmd: "sleep"
        args: ["10"]

teardown: 

# Delete the multipleClientCr
  - name: TCC-3411_delete_yaml_file
    type: foreground
    exec: 
      timeout: 1m
      script:
        cmd: "${ENV.fnSh}"
        args: ["deleteResourse", "./generated/multipleClientCr.yaml"]
    expect:
      - name: status
        operator: equal
        value: 0
    repeat:
      count: 3
      until: success
      sleep: 10s
   
# # Delete the Updated CR
#   - name: TCC-3411_delete_updated_client_yaml_file
#     type: foreground
#     exec: 
#       timeout: 1m
#       script:
#         cmd: "${ENV.fnSh}"
#         args: ["deleteResourse", "./generated/tibcotunnelrouteCRMultipleClientSelectorUpdate.yaml"]
#     expect:
#       - name: status
#         operator: equal
#         value: 0
#     repeat:
#       count: 3
#       until: success
#       sleep: 10s
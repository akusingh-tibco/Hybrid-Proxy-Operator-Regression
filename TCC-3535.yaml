name: Sanity_SingleDeploymentwithDataTransfer_With

tasks: 

# Deploy Tibcotunnelroute CR
  - name: deployCR
    type: foreground
    templates:
     - input: "./resources/tibcotunnelrouteCR.yaml"
       output: "./generated/tibcotunnelrouteCR.yaml"
    exec: 
     timeout: 30s
     script: 
        cmd: "${ENV.fnSh}"
        args: ["deployResourse", "./generated/tibcotunnelrouteCR.yaml"]
        capture:
         stdout:
           - name: output
             match: "((?s).*)"
         stderr:
            - name: outerr
              match: "((?s).*)"
    expect:
     - name: status
       operator: equal
       value: 0

# Status of Tibcotunneroute CR
  - name: tibcotunnelroute-status
    type: foreground
    exec: 
      timeout: 30s
      script: 
        cmd: "kubectl"
        args: ["get", "tibcotunnelroute", "${META_DATA_NAME}", "-n", "${NAMESPACE_TENANT}", "-o", "json"]
        capture: 
          stdout: 
            - name : status_cr
              matchType: jsonpath
              match: "{.status.resource.state}"
    expect:
      - name: status
        operator: equal
        value: 0
      - name: status_cr
        operator: containsStr
        value: "processed"

# Deploy ClientAppn Deployments
  - name: deployClientApp
    type: foreground
    templates: 
      - input: "./resources/client-app.yaml"
        output: "./generated/client-app.yaml"
    exec: 
      timeout: 2m
      script:
        cmd: "${ENV.fnSh}"
        args: ["deployResourse", "./generated/client-app.yaml"]
    expect:
      - name: status
        operator: equal
        value: 0

# tibtunnel configuration
  - name: TCC-3421_tibTunnelConfigure
    type: foreground
    exec:
      timeout: 5s
      script:
        cmd: "/bin/bash"
        args: ["-c", "./tibtunnel configure -a ${suite.setup.secretKey_hashKey.accesskey}"]   
        capture:
          stdout:
            - name: output
              match: "((?s).*)"
    expect:
      - name: output
        operator: containsStr
        value: "'default' was successfully saved"

# Status of Client Applications
  - name: status_of-clientAppn
    type: foreground
    timeout: 1m
    exec:
      script: 
        cmd: "${ENV.fnSh}"
        args: ["getPodNamesUsingSelector", "${NAMESPACE_TENANT}", "app=http"]
        capture:
          stdout:
            - name: running_state
              matchType: jsonpath
              match: "{.items[*].status.phase}"
            - name: capture_pod_name
              matchType: jsonpath
              match: "{.items[0].metadata.name}"
    expect:
      - name: status
        operator: equal
        value: 0
      - name: running_state
        operator: contains
        value: "Running"
      - name: running_state
        operator: notContains
        value: "Pending"
    repeat:
      count: 10
      until: success
      sleep: 20s  

# Tibtunnel Connect
  - name: tibtunnelConnect
    type: background
    exec:
      script:
        cmd: "/bin/bash"
        args: ["-c", "timeout 120s ./tibtunnel connect -d --remote-debug -s ${CONTAINER_PORT}:${ONPREMISE_HOSTNAME}:${ONPREMISE_PORT} -s ${CONTAINER_PORT}:${ONPREMISE_HOSTNAME2}:${ONPREMISE_PORT2}  https://${FQDN}/${ENDPOINT} -l ./tibtunnelLog" ]

# Tunnel Status b/w tibtunnel and Client App 
  - name: checkTunnelStatus
    type: foreground
    timeout: 30s
    exec:
      script:
        #cmd: "kubectl"
        #args: ["exec", "${status_of-clientAppn.capture_pod_name}", "-n${NAMESPACE_TENANT}", "-c", "main", "--", "curl", "-s", "localhost:7778/v1/tunnel/status"]
        cmd: "${ENV.fnSh}"
        args: ["checkTunnelStatus","${status_of-clientAppn.capture_pod_name}","${NAMESPACE_TENANT}"]
        capture:
          stdout: 
            - name: output
              match: "((?s).*)"          
    expect:
      - name: output
        operator: containsStr
        value: "\"isConnected\":true"
      - name: output
        operator: notContainsStr
        value: "false"
      - name: output
        operator: containsStr
        value: "Tunnel is connected"
    repeat:
      count: 2
      until: success
      sleep: 13s  

# Start On-Prem Appn 1
  - name: startOnpremAppn1
    type: background
    exec:
      script:
        cmd: "/bin/bash"
        args: ["-c", "timeout 30s ./tcp-server -d -a ${ONPREMISE_HOSTNAME}:${ONPREMISE_PORT} >> ./tcpserverLog"]
        capture:
          stdout:
            - name: output
              match: "((?s).*)"
          stderr:
            - name: stderr
              match: "((?s).*)"
    expect:
      - name: stderr
        operator: containsStr
        value: "TCP server started"

# Communication b/w ClientPod and On-Prem Appn by sending Data
  - name: sendData
    type: foreground
    exec:
      timeout: 30s
      script:
        cmd: "${ENV.fnSh}"
        args: ["dataTransferToOnpremApp", "${status_of-clientAppn.capture_pod_name}", "${NAMESPACE_TENANT}", "${ONPREMISE_HOSTNAME}:${CONTAINER_PORT}"]
        capture:
          stdout:
            - name: output
              match: "((?s).*)"
          stderr:
            - name: stderr
              match: "((?s).*)"              
    expect:
      - name: stderr
        operator: containsStr
        value: "Successfully send/received 1.0KiB"
    repeat:
      count: 3
      until: success
      sleep: 2s
 
  - name: sleepCommand
    type: foreground
    exec:
      script:
        cmd: "sleep"
        args: ["40"]

# Start On-Prem Appn 2
  - name: startOnpremAppn
    type: background
    exec:
      script:
        cmd: "/bin/bash"
        args: ["-c", "timeout 30s ./tcp-server -d -a ${ONPREMISE_HOSTNAME2}:${ONPREMISE_PORT2} >> ./tcpserverLog"]
        capture:
          stdout:
            - name: output
              match: "((?s).*)"
          stderr:
            - name: stderr
              match: "((?s).*)"
    expect:
      - name: stderr
        operator: containsStr
        value: "TCP server started"

# Communication b/w ClientPod and On-Prem Appn by sending Data 2
  - name: sendData
    type: foreground
    exec:
      timeout: 30s
      script:
        #cmd: "kubectl"
        #args: ["exec", "${status_of-clientAppn.capture_pod_name}", "-n${NAMESPACE_TENANT}", "-c", "main", "--", "/test/tcp-client", "-a", "${ONPREMISE_IP}:${ONPREMISE_PORT}"]
        cmd: "${ENV.fnSh}"
        args: ["dataTransferToOnpremApp", "${status_of-clientAppn.capture_pod_name}", "${NAMESPACE_TENANT}", "${ONPREMISE_HOSTNAME2}:${CONTAINER_PORT}"]
        capture:
          stdout:
            - name: output
              match: "((?s).*)"
          stderr:
            - name: stderr
              match: "((?s).*)"              
    expect:
      - name: stderr
        operator: containsStr
        value: "Successfully send/received 1.0KiB"
    repeat:
      count: 3
      until: success
      sleep: 2s

  - name: sleepCommand
    type: foreground
    exec:
      script:
        cmd: "sleep"
        args: ["80"]

teardown: 

# Delete the Tibcotunneroute CR
  - name: delete_yaml_file
    type: foreground
    exec: 
      timeout: 1m
      script:
        #cmd: "kubectl"
        #args: ["delete", "-f", "./generated/tibcotunnelrouteCR.yaml"]
        cmd: "${ENV.fnSh}"
        args: ["deleteResourse", "./generated/tibcotunnelrouteCR.yaml"]
    expect:
      - name: status
        operator: equal
        value: 0

# Delete the ClientApp Deployments
  - name: delete_yaml_file
    type: foreground
    exec: 
      timeout: 1m
      script:
        #cmd: "kubectl"
        #args: ["delete", "-f", "./generated/client-app.yaml"]
        cmd: "${ENV.fnSh}"
        args: ["deleteResourse", "./generated/client-app.yaml"]
    expect:
      - name: status
        operator: equal
        value: 0
    repeat:
      count: 3
      until: success
      sleep: 10ms

# Verify Tibcotunneroute CR Deletion
  - name: confirm_deletionCR
    type: foreground
    exec: 
      timeout: 1m
      script: 
        #cmd: "kubectl"
        #args: ["get", "tibcotunnelroute", "-n", "${NAMESPACE_TENANT}", "-o", "json"]
        cmd: "${ENV.fnSh}"
        args: ["getResources", "tibcotunnelroute", "${NAMESPACE_TENANT}"]
        capture:
          stdout: 
            - name: confirm_deleteCR
              matchType: jsonpath
              match: "{.items[*].metadata.name}"
    expect:
      - name: status
        operator: equal
        value: 0
      - name: confirm_deleteCR
        operator: notContainsStr
        value: "${META_DATA_NAME}"

# Verify ClientApp Deployments deletion
  - name: confirm_deletionA
    type: foreground
    timeout: 1m
    exec: 
      script: 
        #cmd: "kubectl"
        #args: ["get", "deploy", "-n", "${NAMESPACE_TENANT}", "-o", "json"]
        cmd: "${ENV.fnSh}"
        args: ["getResources", "deploy", "${NAMESPACE_TENANT}"]
        capture:
          stdout: 
            - name: confirm_deleteA
              matchType: jsonpath
              match: "{.items[*].metadata.name}"
    expect:
      - name: status
        operator: equal
        value: 0
      - name: confirm_deleteA
        operator: notContainsStr
        value: "${META_DATA_NAME}"
    repeat:
      count: 5
      until: success
      sleep: 10s 

# Verify client-pod deletion
  - name: confirm_client-pod_deletee
    type: foreground
    timeout: 1m
    exec: 
      script: 
        cmd: "kubectl"
        args: ["get", "po", "-n", "${NAMESPACE_TENANT}", "-o", "json"]
        capture:
          stdout: 
            - name: confirm_client-podd
              matchType: jsonpath
              match: "{.items[*].metadata.name}"
    expect:
      - name: status
        operator: equal
        value: 0
      - name: confirm_client-podd
        operator: notContainsStr
        value: "${META_DATA_NAME}"
    repeat:
      count: 12
      until: success
      sleep: 5s  

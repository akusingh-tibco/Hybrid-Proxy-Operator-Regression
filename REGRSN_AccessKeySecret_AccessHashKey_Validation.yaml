name: AccessKeySecret_AccessHashKey_Validation

env:
  Wrong_AccessKeySecret: dxgdfghggfhjhgmjkjhggbc

tasks:


# TCC-3392:Wrong Access Secret Key configured - verify tibtunnel
# Deploy CR file 
  - name: TCC-deploy_yaml_file
    type: foreground
    templates: 
      - input: "./resources/singleDeploy.yaml"
        output: "./generated/singleDeploy3392.yaml"
    exec: 
      timeout: 2m
      script:
        cmd: "kubectl"
        args: ["apply", "-f", "./generated/singleDeploy3392.yaml"]
    expect:
      - name: status
        operator: equal
        value: 0
# WrongAccessSecret Key tibtunnelConfiguration
  - name: tibTunnelConfigure
    type: foreground
    exec:
      timeout: 5s
      script:
        cmd: "/bin/bash"
        args: ["-c", "./tibtunnel configure -a ${Wrong_AccessKeySecret}"]   
        capture:
          stdout:
            - name: output
              match: "((?s).*)"
    expect:
      - name: output
        operator: containsStr
        value: "'default' was successfully saved"
# Status tibcotunnelroute specific
  - name: state_of_tibcotunnelroute
    type: foreground
    exec: 
      timeout: 30s
      script: 
        cmd: "kubectl"
        args: ["get", "tibcotunnelroute", "${META_DATA_NAME}", "-n", "${NAMESPACE_TENANT}", "-o", "json"]
        capture: 
          stdout: 
            - name : status_cr
              matchType: jsonpath
              match: "{.status.resource.state}"
    expect:
      - name: status
        operator: equal
        value: 0
      - name: status_cr
        operator: containsStr
        value: "processed"
# Status of Pods
  - name: status_of_all_client-pods
    type: foreground
    exec: 
      timeout: 30s
      script: 
        cmd: "kubectl"
        args: ["get", "pods", "-n", "${NAMESPACE_TENANT}", "-o", "json", "--selector=app=http"]
        capture:
          stdout:
            - name: running_state
              matchType: jsonpath
              match: "{.items[*].status.phase}"
            - name: capture_pod_name
              matchType: jsonpath
              match: "{.items[0].metadata.name}"
    expect:
      - name: status
        operator: equal
        value: 0
      - name: running_state
        operator: contains
        value: "Running"
      - name: running_state
        operator: notContains
        value: "Pending"
    repeat:
      count: -1
      until: success 
      sleep: 20ms  
# Start tibtunnel 
  - name: tibtunnelConnect
    type: foreground
    timeout: 15s
    exec:
      script:
        cmd: "/bin/bash"
        args: ["-c", "./tibtunnel connect -d --remote-debug -s 8083:localhost:8083 https://${FQDN}/${ENDPOINT} -l ./tibtunnelLog" ]
        capture:
          stdout:
              - name: output
                match: "((?s).*)"
          stderr:
             - name: stderr
               match: "((?s).*)"
    expect:
      - name: output
        operator: containsStr
        value: "tunnel ended with a runtime error"     #if you open tibtunnel Log it will show supplied credentials are invalid error.
  
#
  - name: info----------------------------------------TCC-3392-Complete
    type: foreground
    exec:
      timeout: 2s
      script:
        cmd: "echo"
        args: ["-e", "."]
    expect:
      - name: status
        operator: equal
        value: 0

# TCC-3481:AccessKeySecret deletion does not impact existing tunnel connection
# Deploy CR file ===== included above in task at line 10
  # - name: TCC-deploy_yaml_file
  #   type: foreground
  #   templates: 
  #     - input: "./resources/singleDeploy.yaml"
  #       output: "./generated/singleDeploy3392.yaml"
  #   exec: 
  #     timeout: 2m
  #     script:
  #       cmd: "kubectl"
  #       args: ["apply", "-f", "./generated/singleDeploy3392.yaml"]
  #   expect:
  #     - name: status
  #       operator: equal
  #       value: 0
# tibtunnel configuration
  - name: tibTunnelConfigure
    type: foreground
    exec:
      timeout: 5s
      script:
        cmd: "/bin/bash"
        args: ["-c", "./tibtunnel configure -a ${suite.setup.secretKey_hashKey.accesskey}"]   
        capture:
          stdout:
            - name: output
              match: "((?s).*)"
    expect:
      - name: output
        operator: containsStr
        value: "'default' was successfully saved"
# Status tibcotunnelroute specific
  - name: state_of_tibcotunnelroute
    type: foreground
    exec: 
      timeout: 30s
      script: 
        cmd: "kubectl"
        args: ["get", "tibcotunnelroute", "${META_DATA_NAME}", "-n", "${NAMESPACE_TENANT}", "-o", "json"]
        capture: 
          stdout: 
            - name : status_cr
              matchType: jsonpath
              match: "{.status.resource.state}"
    expect:
      - name: status
        operator: equal
        value: 0
      - name: status_cr
        operator: containsStr
        value: "processed"
# Status of Pods ======= included above in task at line 61
  # - name: status_of_all_client-pods
  #   type: foreground
  #   exec: 
  #     timeout: 30s
  #     script: 
  #       cmd: "kubectl"
  #       args: ["get", "pods", "-n", "${NAMESPACE_TENANT}", "-o", "json", "--selector=app=http"]
  #       capture:
  #         stdout:
  #           - name: running_state
  #             matchType: jsonpath
  #             match: "{.items[*].status.phase}"
  #           - name: capture_pod_name
  #             matchType: jsonpath
  #             match: "{.items[0].metadata.name}"
  #   expect:
  #     - name: status
  #       operator: equal
  #       value: 0
  #     - name: running_state
  #       operator: contains
  #       value: "Running"
  #     - name: running_state
  #       operator: notContains
  #       value: "Pending"
  #   repeat:
  #     count: -1
  #     until: success 
  #     sleep: 20ms  
# Start tibtunnel 
  - name: tibtunnelConnect
    type: background
    exec:
      script:
        cmd: "/bin/bash"
        args: ["-c", "timeout 40s ./tibtunnel connect -d --remote-debug -s 8083:localhost:8083 https://${FQDN}/${ENDPOINT} -l ./tibtunnelLog" ]
# Tunnel Status b/w tibtunnel and Client App 
  - name: checkTunnelStatus
    type: foreground
    exec:
      script:
        cmd: "kubectl"
        args: ["exec", "${status_of_all_client-pods.capture_pod_name}", "-n${NAMESPACE_TENANT}", "-c", "main", "--", "curl", "-s", "localhost:7778/v1/tunnel/status"]
        capture:
          stdout: 
            - name: output
              match: "((?s).*)"          
    expect:
      - name: output
        operator: containsStr
        value: "true"
      - name: output
        operator: notContainsStr
        value: "false"
# Delete last saved AccessKey
  - name: deleteAccesslastSaved
    type: foreground
    exec:
      timeout: 10s
      script:
        cmd: "/bin/bash"
        args: ["-c", "sed -i '' -e '$ d' ~/.tibtunnel/credentials"]   
        capture:
          stdout:
            - name: output
              match: "((?s).*)"
    expect:
      - name: output
        operator: notContainsStr
        value: "${suite.setup.secretKey_hashKey.accesskey}"
  - name: sleepCommand
    type: foreground
    exec:
      script:
        cmd: "sleep"
        args: ["10"]
# Tunnel Status after deletion of AcessSecretSavedb/w tibtunnel and Client App 
  - name: checkTunnelStatusAfterSecretDeletion
    type: foreground
    exec:
      script:
        cmd: "kubectl"
        args: ["exec", "${status_of_all_client-pods.capture_pod_name}", "-n${NAMESPACE_TENANT}", "-c", "main", "--", "curl", "-s", "localhost:7778/v1/tunnel/status"]
        capture:
          stdout: 
            - name: output
              match: "((?s).*)"          
    expect:
      - name: output
        operator: containsStr
        value: "true"
      - name: output
        operator: notContainsStr
        value: "false"
  - name: sleepCommand
    type: foreground
    exec:
      script:
        cmd: "sleep"
        args: ["35"]

#
  - name: info----------------------------------------TCC-3481-Complete
    type: foreground
    exec:
      timeout: 2s
      script:
        cmd: "echo"
        args: ["-e", "."]
    expect:
      - name: status
        operator: equal
        value: 0

# TCC-3483:AccessKeyHash updation in TibcoTunnelRoute CR
# tibtunnel configuration ======= included above at task at line 140
  - name: tibTunnelConfigure
    type: foreground
    exec:
      timeout: 5s
      script:
        cmd: "/bin/bash"
        args: ["-c", "./tibtunnel configure -a ${suite.setup.secretKey_hashKey.accesskey}"]   
        capture:
          stdout:
            - name: output
              match: "((?s).*)"
    expect:
      - name: output
        operator: containsStr
        value: "'default' was successfully saved"
# Start tibtunnel 
  - name: tibtunnelConnect
    type: background
    exec:
      script:
        cmd: "/bin/bash"
        args: ["-c", "timeout 40s ./tibtunnel connect -d --remote-debug -s 8083:localhost:8083 https://${FQDN}/${ENDPOINT} -l ./tibtunnelLog" ]
        capture:
          stdout:
              - name: output
                match: "((?s).*)"
          stderr:
             - name: stderr
               match: "((?s).*)"
    # expect:
    #   - name: output
    #     operator: containsStr
    #     value: "least one tunnel ended with a runtime error"     #if you open tibtunnel Log it will show supplied credentials are invalid error.
# Tunnel Status b/w tibtunnel and Client App with right CR
  - name: checkTunnelStatuss
    type: foreground
    exec:
      script:
        cmd: "kubectl"
        args: ["exec", "${status_of_all_client-pods.capture_pod_name}", "-n${NAMESPACE_TENANT}", "-c", "main", "--", "curl", "-s", "localhost:7778/v1/tunnel/status"]
        capture:
          stdout: 
            - name: output
              match: "((?s).*)"          
    expect:
      - name: output
        operator: containsStr
        value: "true"
      - name: output
        operator: notContainsStr
        value: "false"
# Deploy CR with wrong AccessKeyHash
  - name: deploy
    type: foreground
    templates: 
      - input: "./resources/singleDeployWrongHash.yaml"
        output: "./generated/singleDeployWrongHash.yaml"
    exec: 
      script:
        cmd: "kubectl"
        args: ["apply", "-f", "./generated/singleDeployWrongHash.yaml"]
    expect:
      - name: status
        operator: equal
        value: 0
  - name: sleepCommand
    type: foreground
    exec:
      script:
      cmd: "sleep"
      args: ["10"]
# Tunnel Status b/w tibtunnel and Client App after CR with wrong HASH--- tunnel must be false as the cr is updated with new Hash and credentials are invalid
  - name: checkTunnelStatus
    type: foreground
    exec:
      script:
        cmd: "kubectl"
        args: ["exec", "${status_of_all_client-pods.capture_pod_name}", "-n${NAMESPACE_TENANT}", "-c", "main", "--", "curl", "-s", "localhost:7778/v1/tunnel/status"]
        capture:
          stdout: 
            - name: output
              match: "((?s).*)"          
    expect:
      - name: output
        operator: notContainsStr
        value: "true"
      - name: output
        operator: containsStr
        value: "false"
  - name: sleepCommand
    type: foreground
    exec:
      script:
      cmd: "sleep"
      args: ["30"]

teardown: